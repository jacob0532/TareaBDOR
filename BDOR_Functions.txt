---------------------------CREATE EMPLEADOS---------------------

CREATE OR REPLACE FUNCTION Empleado_create(IN nombre character varying, IN apellido1 character varying, IN apellido2 character varying, IN cedula integer,
										  IN edad integer, IN numeroDeEmpleado integer) -- Agrega un nuevo empleado a la base de datos
RETURNS BIT
LANGUAGE plpgsql
AS
$$
BEGIN
INSERT INTO public."Empleado"(informacion, "numeroDeEmpleadoPK") -- Cualquier atributo que lleve mayusculas debe ir entre comillas por cuestiones de case sensitivity
	VALUES ((nombre,cedula,apellido1,apellido2,edad)::persona,numeroDeEmpleado);
IF NOT FOUND THEN
	RETURN 0;
ELSE
	RETURN 1;
END IF;
END;
$$;

---------------------------------CRUD CLIENTES---------------------------------
/*
Función: Clientes_read
Entradas: Ninguna
Salidas: Bit que indica el éxito de la operación
Descripción: Obtiene los clientes y todos sus datos
*/
CREATE OR REPLACE FUNCTION clientes_read() 
RETURNS TABLE(PK int, "informacion" Persona, "metodo de pago" character varying)
LANGUAGE plpgsql
AS
$$
BEGIN
RETURN QUERY SELECT cl."clientePK", cl."informacion", cl."metodoDePago"
	FROM public."Cliente" cl;
END;
$$;

/*
Función: Clientes_create
Entradas: Nombre, apellido1, apellido2, edad, cedula, metodo de pago
Salidas: Bit que indica el éxito de la operación
Descripción: Inserta un nuevo cliente a la base de datos; Forma un objeto cliente que es insertado junto con un método
de pago definido por el usuario. No recibe objetos tipo "persona"
*/
CREATE OR REPLACE FUNCTION clientes_create(IN nombre character varying, IN apellido1 character varying, IN apellido2 character varying, IN cedula integer,
										  IN edad integer, IN metodo_de_pago character varying) -- Agrega un nuevo cliente a la base de datos
RETURNS BIT
LANGUAGE plpgsql
AS
$$
BEGIN
INSERT INTO public."Cliente"(informacion, "metodoDePago") -- Cualquier atributo que lleve mayusculas debe ir entre comillas por cuestiones de case sensitivity
	VALUES ((nombre,cedula,apellido1,apellido2,edad)::persona,metodo_de_pago);
IF NOT FOUND THEN
	RETURN 0;
ELSE
	RETURN 1;
END IF;
END;
$$;
/*
Función: Clientes_update
Entradas: identificador de un cliente, metodo de pago nuevo
Salidas: Bit que indica el éxito de la operación
Descripción: Actualiza el método de pago asociado con un cliente
*/
CREATE OR REPLACE FUNCTION clientes_update(IN clienteId int, IN nuevoMetodoPago character varying)
RETURNS BIT
LANGUAGE plpgsql
AS
$$
BEGIN
UPDATE public."Cliente"
	SET "metodoDePago"= nuevoMetodoPago
	WHERE "clientePK" = clienteId;
IF NOT FOUND THEN
	RETURN 0;
ELSE
	RETURN 1;
END IF;
END;
$$;
/*
Función: Clientes_delete
Entradas: identificador de un cliente
Salidas: Bit que indica el éxito de la operación
Descripción: Elimina los datos de un cliente de la base de datos
*/
CREATE OR REPLACE FUNCTION clientes_delete(IN clienteId int)
RETURNS BIT
LANGUAGE plpgsql
AS
$$
BEGIN
DELETE FROM public."Cliente"
	WHERE "clientePK" = clienteId;
IF NOT FOUND THEN
	RETURN 0;
ELSE
	RETURN 1;
END IF;
END;
$$;



---------------------------------CRUD PROVEEDORES---------------------------------
/*
Mostrar Proveedores
*/
CREATE OR REPLACE FUNCTION proveedor_read() 
RETURNS TABLE(PK int, "cedula juridica" bigint,"duenno" Persona, "nombre de empresa" character varying)
LANGUAGE plpgsql
AS
$$
BEGIN
RETURN QUERY SELECT pr."proveedorPK", pr."cedulaJuridica", pr."duenno", pr."nombreEmpresa"
	FROM public."Proveedor" pr;
END;
$$;

/*
Insertar Proveedores
*/
CREATE OR REPLACE FUNCTION proveedor_create(IN cedula_juridica bigint, IN nombre character varying, IN apellido1 character varying, IN apellido2 character varying, IN cedula integer,
										  IN edad integer, IN nombre_empresa character varying) -- Agrega un nuevo Proveedor a la base de datos
RETURNS BIT
LANGUAGE plpgsql
AS
$$
BEGIN
INSERT INTO public."Proveedor"("cedulaJuridica", duenno,"nombreEmpresa") -- Cualquier atributo que lleve mayusculas debe ir entre comillas por cuestiones de case sensitivity
	VALUES (cedula_juridica,(nombre,cedula,apellido1,apellido2,edad)::persona,nombre_empresa);
IF NOT FOUND THEN
	RETURN 0;
ELSE
	RETURN 1;
END IF;
END;
$$;
/*
Función: actualizar proveedores
*/
CREATE OR REPLACE FUNCTION proveedor_update(IN proveedorId int, IN nueva_cedula_juridica bigint,
											IN nuevo_nombre_empresa character varying)
RETURNS BIT
LANGUAGE plpgsql
AS
$$
BEGIN
UPDATE public."Proveedor"
	SET "cedulaJuridica"= nueva_cedula_juridica, "nombreEmpresa"= nuevo_nombre_empresa
	WHERE "proveedorPK" = proveedorId;
IF NOT FOUND THEN
	RETURN 0;
ELSE
	RETURN 1;
END IF;
END;
$$;
/*
EliminarProveedor
*/
CREATE OR REPLACE FUNCTION proveedor_delete(IN proveedorId int)
RETURNS BIT
LANGUAGE plpgsql
AS
$$
BEGIN
DELETE FROM public."Proveedor"
	WHERE "proveedorPK" = proveedorId;
IF NOT FOUND THEN
	RETURN 0;
ELSE
	RETURN 1;
END IF;
END;
$$;


---------------------------------CRUD PRODUCTOS---------------------------------
/*
MostrarProducto
*/
CREATE OR REPLACE FUNCTION producto_read() 
RETURNS TABLE(PK int,"nombre" character varying,"precio" integer,"caracteristicas" text,
			  "categoria" Categoriasxproducto)
LANGUAGE plpgsql
AS
$$
BEGIN
RETURN QUERY SELECT pro."idProductoPK", pro."nombre", pro."precio", pro."caracteristicas",
    pro."categoria"
	FROM public."Producto" pro;
END;
$$;

/*
InsertarProducto
nombre producto
precio producto
caracteristicas producto

nombre categoria
nombre inventario
cantidad inventario
valor monetario inventario
*/
CREATE OR REPLACE FUNCTION producto_create(IN nombre character varying, IN precio integer, 
										   IN caracteristicas text, IN nombre_categoria character varying,
										   IN nombre_inventario character varying, 
										   IN cantidad_inventario integer,
										  IN valor_inventario integer) -- Agrega un nuevo cliente a la base de datos
RETURNS BIT
LANGUAGE plpgsql
AS
$$
BEGIN
INSERT INTO public."Producto"(nombre, precio, caracteristicas, 
							  categoria) -- Cualquier atributo que lleve mayusculas debe ir entre comillas por cuestiones de case sensitivity
	VALUES (nombre, precio, caracteristicas, 
		(nombre_categoria,(nombre_inventario, cantidad_inventario, valor_inventario)::Inventario)::Categoriasxproducto
		   );
IF NOT FOUND THEN
	RETURN 0;
ELSE
	RETURN 1;
END IF;
END;
$$;
/*
ActualizarProducto
*/
CREATE OR REPLACE FUNCTION producto_update(IN productoId int, IN nuevoNombre character varying,
										  IN nuevoPrecio integer, IN nuevoCaracteristicas text)
RETURNS BIT
LANGUAGE plpgsql
AS
$$
BEGIN
UPDATE public."Producto"
	SET "nombre"= nuevoNombre, "precio"= nuevoPrecio, "caracteristicas"= nuevoCaracteristicas
	WHERE "idProductoPK" = productoId;
IF NOT FOUND THEN
	RETURN 0;
ELSE
	RETURN 1;
END IF;
END;
$$;
/*
EliminarProducto
*/
CREATE OR REPLACE FUNCTION producto_delete(IN productoId int)
RETURNS BIT
LANGUAGE plpgsql
AS
$$
BEGIN
DELETE FROM public."Producto"
	WHERE "idProductoPK" = productoId;
IF NOT FOUND THEN
	RETURN 0;
ELSE
	RETURN 1;
END IF;
END;
$$;

--------------------------------------Consulta------------------------------
SELECT (informacion)."nombre", public."Empleado"."numeroDeEmpleadoPK", public."Producto"."nombre" as "Nombre de producto", SUM(distinct public."VentasXProducto"."cantidad")
FROM public."Empleado"
INNER JOIN public."Venta" on public."Venta"."idEmpleadoFK" = public."Empleado"."numeroDeEmpleadoPK"
INNER JOIN public."VentasXProducto" on public."Venta"."idVentaPK" = public."VentasXProducto"."idVentasFK"
INNER JOIN public."Producto" on public."VentasXProducto"."idProductoFK" = public."Producto"."idProductoPK"
GROUP BY (informacion)."nombre", public."Empleado"."numeroDeEmpleadoPK",public."Producto"."nombre"
ORDER BY SUM(public."VentasXProducto"."cantidad") DESC LIMIT 3;
